{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f7996bc9",
   "metadata": {},
   "source": [
    "# Boxplot\n",
    "\n",
    "Parameters:  \n",
    "\n",
    "    df: pd.DataFrame,\n",
    "    x: object --> string column name of the violinplot values in the DF for the X\n",
    "    y: object --> string column name of the violinplot values in the DF for the Y \n",
    "    title='' --> string title\n",
    "    xlabel='' --> string x label \n",
    "    ylabel='' --> string y label \n",
    "    hue=None --> column you want to colour by\n",
    "    order=None --> order of your values\n",
    "    box_colors=None, --> a list of colours to plot the boxes by --> only works in older version of matplotlib\n",
    "    showfliers=False, \n",
    "    add_dots=False, \n",
    "    add_stats=True,\n",
    "    stat_method='Mann-Whitney',  # options: t-test_ind, t-test_welch, t-test_paired, Mann-Whitney, Mann-Whitney-gt, Mann-Whitney-ls, Levene, Wilcoxon, Kruskal from: https://www.statsmodels.org/stable/api.html\n",
    "    box_pairs=None --> a list of box pairs i.e. comparisons for the statistics\n",
    "    figsize=(3, 3), \n",
    "    title_font_size=12, \n",
    "    label_font_size=8, \n",
    "    title_font_weight=700, \n",
    "    config={})\n",
    "\n",
    "    \n",
    "\n",
    "Config options = any of the parameters with the same name but with in a dictionary format instead, and also includes default parameters for the visualisation such as the font family and font.\n",
    "\n",
    "Example config:\n",
    "```\n",
    "config={'palette': ['red', 'yellow', 'pink'], \n",
    "       'figsize':(4, 5),  # Size of figure (x, y)\n",
    "        'title_font_size': 16, # Size of the title (pt)\n",
    "        'label_font_size': 12, # Size of the labels (pt)\n",
    "        'title_font_weight': 700, # 700 = bold, 600 = normal, 400 = thin\n",
    "        'font_family': 'sans-serif', # 'serif', 'sans-serif', or 'monospace'\n",
    "        'font': ['Tahoma'] # Default: Arial  # http://jonathansoma.com/lede/data-studio/matplotlib/list-all-fonts-available-in-matplotlib-plus-samples/\n",
    "}\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ef75c87",
   "metadata": {},
   "source": [
    "## Loading data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "743851b3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_length</th>\n",
       "      <th>sepal_width</th>\n",
       "      <th>petal_length</th>\n",
       "      <th>petal_width</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>6.7</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.3</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>6.3</td>\n",
       "      <td>2.5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.9</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>6.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>6.2</td>\n",
       "      <td>3.4</td>\n",
       "      <td>5.4</td>\n",
       "      <td>2.3</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>5.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.1</td>\n",
       "      <td>1.8</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>150 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     sepal_length  sepal_width  petal_length  petal_width           label\n",
       "0             5.1          3.5           1.4          0.2     Iris-setosa\n",
       "1             4.9          3.0           1.4          0.2     Iris-setosa\n",
       "2             4.7          3.2           1.3          0.2     Iris-setosa\n",
       "3             4.6          3.1           1.5          0.2     Iris-setosa\n",
       "4             5.0          3.6           1.4          0.2     Iris-setosa\n",
       "..            ...          ...           ...          ...             ...\n",
       "145           6.7          3.0           5.2          2.3  Iris-virginica\n",
       "146           6.3          2.5           5.0          1.9  Iris-virginica\n",
       "147           6.5          3.0           5.2          2.0  Iris-virginica\n",
       "148           6.2          3.4           5.4          2.3  Iris-virginica\n",
       "149           5.9          3.0           5.1          1.8  Iris-virginica\n",
       "\n",
       "[150 rows x 5 columns]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sciviso import Barchart, Boxplot, Heatmap, Histogram, Scatterplot, Violinplot, Volcanoplot, Line\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "df = pd.read_csv('iris.csv')\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "655d33b0",
   "metadata": {},
   "source": [
    "## Basic boxplot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bee623f5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-value annotation legend:\n",
      "ns: 5.00e-02 < p <= 1.00e+00\n",
      "*: 1.00e-02 < p <= 5.00e-02\n",
      "**: 1.00e-03 < p <= 1.00e-02\n",
      "***: 1.00e-04 < p <= 1.00e-03\n",
      "****: p <= 1.00e-04\n",
      "\n",
      "Iris-setosa v.s. Iris-versicolor: Mann-Whitney-Wilcoxon test two-sided with Bonferroni correction, P_val=8.950e-13 U_stat=2.306e+03\n",
      "Iris-versicolor v.s. Iris-virginica: Mann-Whitney-Wilcoxon test two-sided with Bonferroni correction, P_val=1.372e-02 U_stat=8.410e+02\n",
      "Iris-setosa v.s. Iris-virginica: Mann-Whitney-Wilcoxon test two-sided with Bonferroni correction, P_val=3.543e-08 U_stat=2.074e+03\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 216x216 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "boxplot = Boxplot(df, x='label', y='sepal_width')\n",
    "boxplot.plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8abd608b",
   "metadata": {},
   "source": [
    "## Formatting data for boxplot\n",
    "\n",
    "Data needs to be formamted for the boxplot, for example, if we have a gene list and want to do a boxplot of just a few of them or some groups of genes (e.g. a group of genes we're interested in comparing between two conditions).  \n",
    "\n",
    "For this we'll use a different example dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6b8f2bf6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>external_gene_name</th>\n",
       "      <th>logfc</th>\n",
       "      <th>padj</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>MT-TF</td>\n",
       "      <td>-2.6</td>\n",
       "      <td>0.02128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>MT-RNR1</td>\n",
       "      <td>-6.1</td>\n",
       "      <td>0.83880</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>MT-TV</td>\n",
       "      <td>-8.6</td>\n",
       "      <td>0.25140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>MT-RNR2</td>\n",
       "      <td>-0.9</td>\n",
       "      <td>0.29380</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>MT-TL1</td>\n",
       "      <td>1.1</td>\n",
       "      <td>0.58210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73620</th>\n",
       "      <td>ARHGEF5</td>\n",
       "      <td>6.5</td>\n",
       "      <td>0.55980</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73621</th>\n",
       "      <td>NOBOX</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.01870</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73622</th>\n",
       "      <td>AC004864.1</td>\n",
       "      <td>-8.5</td>\n",
       "      <td>0.05760</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73623</th>\n",
       "      <td>MTRF1LP2</td>\n",
       "      <td>-4.8</td>\n",
       "      <td>0.17570</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73624</th>\n",
       "      <td>GSDMC</td>\n",
       "      <td>3.5</td>\n",
       "      <td>0.78250</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>73625 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      external_gene_name  logfc     padj\n",
       "0                  MT-TF   -2.6  0.02128\n",
       "1                MT-RNR1   -6.1  0.83880\n",
       "2                  MT-TV   -8.6  0.25140\n",
       "3                MT-RNR2   -0.9  0.29380\n",
       "4                 MT-TL1    1.1  0.58210\n",
       "...                  ...    ...      ...\n",
       "73620            ARHGEF5    6.5  0.55980\n",
       "73621              NOBOX    1.5  0.01870\n",
       "73622         AC004864.1   -8.5  0.05760\n",
       "73623           MTRF1LP2   -4.8  0.17570\n",
       "73624              GSDMC    3.5  0.78250\n",
       "\n",
       "[73625 rows x 3 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('volcano.csv')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a6b33111",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Samples  Values Conditions\n",
      "0    cond_1     0.0     cond_1\n",
      "1    cond_2    -2.0     cond_2\n",
      "2    cond_1    -1.8     cond_1\n",
      "3    cond_2    -3.8     cond_2\n",
      "4    cond_1    -6.9     cond_1\n",
      "..      ...     ...        ...\n",
      "125  cond_2    -2.4     cond_2\n",
      "126  cond_1     7.0     cond_1\n",
      "127  cond_2     5.0     cond_2\n",
      "128  cond_1    -7.7     cond_1\n",
      "129  cond_2    -9.7     cond_2\n",
      "\n",
      "[130 rows x 3 columns]\n",
      "p-value annotation legend:\n",
      "ns: 5.00e-02 < p <= 1.00e+00\n",
      "*: 1.00e-02 < p <= 5.00e-02\n",
      "**: 1.00e-03 < p <= 1.00e-02\n",
      "***: 1.00e-04 < p <= 1.00e-03\n",
      "****: p <= 1.00e-04\n",
      "\n",
      "cond_1 v.s. cond_2: Mann-Whitney-Wilcoxon test two-sided with Bonferroni correction, P_val=2.169e-02 U_stat=2.606e+03\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 216x216 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Now we'll do an example where we look at the logFC between two conditions\n",
    "# of a group of genes and test whether they are significantly different.\n",
    "\n",
    "# Pretend we have two conditions\n",
    "df['cond_1'] = df['logfc'] + 1\n",
    "df['cond_2'] = df['logfc'] - 1\n",
    "\n",
    "boxplot = Boxplot(df, x='external_gene_name', y='logfc')\n",
    "hox_genes = [g for g in df['external_gene_name'].values if 'HOX' in g]\n",
    "# conditions: list, filter_column=None, filter_values=None\n",
    "formatted_df = boxplot.format_data_for_boxplot(\n",
    "                   df, \n",
    "                   conditions=[\"cond_1\", \"cond_2\"], \n",
    "                   filter_column=\"external_gene_name\",\n",
    "                   filter_values=hox_genes\n",
    "                )\n",
    "print(formatted_df)\n",
    "\n",
    "# Reinitialise boxplot with the new data\n",
    "boxplot = Boxplot(formatted_df, \"Conditions\", \"Values\", \n",
    "                  box_colors=[\"plum\", \"gold\"], \n",
    "                  add_dots=True)\n",
    "boxplot.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0023dcd",
   "metadata": {},
   "source": [
    "## Advanced sytle options\n",
    "\n",
    "Here are some examples where things like the bin, color and fig size have been changed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ed12550b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-value annotation legend:\n",
      "ns: 5.00e-02 < p <= 1.00e+00\n",
      "*: 1.00e-02 < p <= 5.00e-02\n",
      "**: 1.00e-03 < p <= 1.00e-02\n",
      "***: 1.00e-04 < p <= 1.00e-03\n",
      "****: p <= 1.00e-04\n",
      "\n",
      "cond_1 v.s. cond_2: Mann-Whitney-Wilcoxon test two-sided with Bonferroni correction, P_val=2.169e-02 U_stat=2.606e+03\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# boxplot = Boxplot(df: pd.DataFrame, x: object, y: object, title='', xlabel='', ylabel='', box_colors=None,\n",
    "#                 hue=None, order=None, hue_order=None, showfliers=False, add_dots=False, add_stats=True,\n",
    "#                 stat_method='Mann-Whitney', box_pairs=None, figsize=(3, 3), title_font_size=12, label_font_size=8, title_font_weight=700)# Config options = any of the parameters with the same name but with in a dictionary format instead\n",
    "\n",
    "# Let's continue with the previous example with the formatted data\n",
    "\n",
    "boxplot = Boxplot(df=formatted_df, x='Conditions', y='Values', title='Hox genes', xlabel='', ylabel='Log FC', \n",
    "                  box_colors=None, # An ordered list of colours to match the conditions\n",
    "                  hue=None, # A column in your dataset that you want to colour by\n",
    "                  order=None, # Order of the box's\n",
    "                  hue_order=None, # order of the colours\n",
    "                  showfliers=False, # Show fliers (on the box's)\n",
    "                  add_dots=False,  # Add dots for each data point\n",
    "                  add_stats=True, # Add statistics between box's pairwise tests\n",
    "                  stat_method='Mann-Whitney', # Type of stat\n",
    "                  box_pairs=None, # Pre-specified comparisons (if you don't want to do all pairs)\n",
    "                  figsize=(3, 3), \n",
    "                  title_font_size=12, \n",
    "                  label_font_size=8, \n",
    "                  title_font_weight=700, # Config options = any of the parameters with the same name but with in a dictionary format instead\n",
    "                  # You could also pass these as individual parameters, but it's easier to set as a dictionary\n",
    "                  # also, then you can re-use it for other charts!\n",
    "                  config={'figsize':(4, 5),  # Size of figure (x, y)\n",
    "                       'title_font_size': 16, # Size of the title (pt)\n",
    "                       'label_font_size': 12, # Size of the labels (pt)\n",
    "                       'title_font_weight': 700, # 700 = bold, 600 = normal, 400 = thin\n",
    "                       'font_family': 'sans-serif', # 'serif', 'sans-serif', or 'monospace'\n",
    "                       'font': ['Tahoma'] # Default: Arial  # http://jonathansoma.com/lede/data-studio/matplotlib/list-all-fonts-available-in-matplotlib-plus-samples/\n",
    "                  })\n",
    "boxplot.plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "672e65fb",
   "metadata": {},
   "source": [
    "## Show multiple comparisons\n",
    "\n",
    "In this one we have an example where we have two conditions for two groups of genes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d4245918",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-value annotation legend:\n",
      "ns: 5.00e-02 < p <= 1.00e+00\n",
      "*: 1.00e-02 < p <= 5.00e-02\n",
      "**: 1.00e-03 < p <= 1.00e-02\n",
      "***: 1.00e-04 < p <= 1.00e-03\n",
      "****: p <= 1.00e-04\n",
      "\n",
      "cond_1 v.s. cond_2: t-test independent samples with Bonferroni correction, P_val=1.843e-13 stat=7.417e+00\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 216x216 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Pretend we have two conditions\n",
    "df['cond_1'] = df['logfc'] + 1\n",
    "df['cond_2'] = df['logfc'] - 1\n",
    "\n",
    "boxplot = Boxplot(df, x='external_gene_name', y='logfc')\n",
    "mt_genes = [g for g in df['external_gene_name'].values if 'MT' in g]\n",
    "hox_genes = [g for g in df['external_gene_name'].values if 'HOX' in g]\n",
    "# conditions: list, filter_column=None, filter_values=None\n",
    "hox_df = boxplot.format_data_for_boxplot(\n",
    "                   df, \n",
    "                   conditions=[\"cond_1\", \"cond_2\"], \n",
    "                   filter_column=\"external_gene_name\",\n",
    "                   filter_values=hox_genes)\n",
    "\n",
    "# Add another column to the hox df that's the label\n",
    "hox_df['Gene Group'] = 'Hox'\n",
    "\n",
    "# Create a df for the MT genes\n",
    "mt_df = boxplot.format_data_for_boxplot(\n",
    "                   df, \n",
    "                   conditions=[\"cond_1\", \"cond_2\"], \n",
    "                   filter_column=\"external_gene_name\",\n",
    "                   filter_values=mt_genes)\n",
    "\n",
    "# Add another column to the hox df that's the label\n",
    "mt_df['Gene Group'] = 'MT'\n",
    "\n",
    "gene_df = pd.concat([hox_df, mt_df])\n",
    "\n",
    "# Now we set hue\n",
    "boxplot = Boxplot(df=gene_df, x='Conditions', y='Values', title='Hox & MT genes', xlabel='', ylabel='Log FC', \n",
    "                  box_colors=None, # An ordered list of colours to match the conditions\n",
    "                  hue='Gene Group', # A column in your dataset that you want to colour by\n",
    "                  order=None, # Order of the box's\n",
    "                  hue_order=None, # order of the colours\n",
    "                  showfliers=False, # Show fliers (on the box's)\n",
    "                  add_dots=False,  # Add dots for each data point\n",
    "                  add_stats=True, # Add statistics between box's pairwise tests\n",
    "                  stat_method='t-test_ind', # Type of stat\n",
    "                  box_pairs=None, # Pre-specified comparisons (if you don't want to do all pairs)\n",
    "                  figsize=(3, 3), \n",
    "                  title_font_size=12, \n",
    "                  label_font_size=8, \n",
    "                  title_font_weight=700) # Config options = any of the parameters with the same name but with in a dictionary format instead)\n",
    "boxplot.plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d90f086",
   "metadata": {},
   "source": [
    "## Another example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "769020a9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-value annotation legend:\n",
      "ns: 5.00e-02 < p <= 1.00e+00\n",
      "*: 1.00e-02 < p <= 5.00e-02\n",
      "**: 1.00e-03 < p <= 1.00e-02\n",
      "***: 1.00e-04 < p <= 1.00e-03\n",
      "****: p <= 1.00e-04\n",
      "\n",
      "cond_1Hox v.s. cond_1MT: Mann-Whitney-Wilcoxon test two-sided with Bonferroni correction, P_val=1.000e+00 U_stat=2.699e+04\n",
      "cond_1MT v.s. cond_2Hox: Mann-Whitney-Wilcoxon test two-sided with Bonferroni correction, P_val=5.865e-02 U_stat=3.216e+04\n",
      "cond_2Hox v.s. cond_2MT: Mann-Whitney-Wilcoxon test two-sided with Bonferroni correction, P_val=1.000e+00 U_stat=2.699e+04\n",
      "cond_1Hox v.s. cond_2Hox: Mann-Whitney-Wilcoxon test two-sided with Bonferroni correction, P_val=1.301e-01 U_stat=2.606e+03\n",
      "cond_1MT v.s. cond_2MT: Mann-Whitney-Wilcoxon test two-sided with Bonferroni correction, P_val=7.349e-11 U_stat=4.106e+05\n",
      "cond_1Hox v.s. cond_2MT: Mann-Whitney-Wilcoxon test two-sided with Bonferroni correction, P_val=6.067e-02 U_stat=3.214e+04\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 216x216 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-value annotation legend:\n",
      "ns: 5.00e-02 < p <= 1.00e+00\n",
      "*: 1.00e-02 < p <= 5.00e-02\n",
      "**: 1.00e-03 < p <= 1.00e-02\n",
      "***: 1.00e-04 < p <= 1.00e-03\n",
      "****: p <= 1.00e-04\n",
      "\n",
      "cond_1Hox v.s. cond_2Hox: Mann-Whitney-Wilcoxon test two-sided with Bonferroni correction, P_val=4.338e-02 U_stat=2.606e+03\n",
      "cond_1MT v.s. cond_2MT: Mann-Whitney-Wilcoxon test two-sided with Bonferroni correction, P_val=2.450e-11 U_stat=4.106e+05\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 216x216 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-value annotation legend:\n",
      "ns: 5.00e-02 < p <= 1.00e+00\n",
      "*: 1.00e-02 < p <= 5.00e-02\n",
      "**: 1.00e-03 < p <= 1.00e-02\n",
      "***: 1.00e-04 < p <= 1.00e-03\n",
      "****: p <= 1.00e-04\n",
      "\n",
      "cond_1Hox v.s. cond_2Hox: Mann-Whitney-Wilcoxon test two-sided with Bonferroni correction, P_val=4.338e-02 U_stat=2.606e+03\n",
      "cond_1MT v.s. cond_2MT: Mann-Whitney-Wilcoxon test two-sided with Bonferroni correction, P_val=2.450e-11 U_stat=4.106e+05\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 216x216 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Pretend we have two conditions and two groups of genes we want to identify the significance between\n",
    "df['cond_1'] = df['logfc'] + 1\n",
    "df['cond_2'] = df['logfc'] - 1\n",
    "\n",
    "boxplot = Boxplot(df, x='external_gene_name', y='logfc')\n",
    "mt_genes = [g for g in df['external_gene_name'].values if 'MT' in g]\n",
    "hox_genes = [g for g in df['external_gene_name'].values if 'HOX' in g]\n",
    "# conditions: list, filter_column=None, filter_values=None\n",
    "hox_df = boxplot.format_data_for_boxplot(\n",
    "                   df, \n",
    "                   conditions=[\"cond_1\", \"cond_2\"], \n",
    "                   filter_column=\"external_gene_name\",\n",
    "                   filter_values=hox_genes)\n",
    "\n",
    "# Add another column to the hox df that's the label\n",
    "hox_df['Gene Group'] = 'Hox'\n",
    "hox_df['Conditions'] = hox_df['Conditions'].values + hox_df['Gene Group'].values\n",
    "\n",
    "# Create a df for the MT genes\n",
    "mt_df = boxplot.format_data_for_boxplot(\n",
    "                   df, \n",
    "                   conditions=[\"cond_1\", \"cond_2\"], \n",
    "                   filter_column=\"external_gene_name\",\n",
    "                   filter_values=mt_genes)\n",
    "\n",
    "# Add another column to the hox df that's the label\n",
    "mt_df['Gene Group'] = 'MT'\n",
    "mt_df['Conditions'] = mt_df['Conditions'].values + mt_df['Gene Group'].values\n",
    "\n",
    "gene_df = pd.concat([hox_df, mt_df])\n",
    "\n",
    "#\n",
    "boxplot = Boxplot(df=gene_df, x='Conditions', y='Values', title='Hox & MT genes', xlabel='', ylabel='Log FC', \n",
    "                  hue='Gene Group') # A column in your dataset that you want to colour by) # Config options = any of the parameters with the same name but with in a dictionary format instead)\n",
    "boxplot.plot()\n",
    "plt.show()\n",
    "                  \n",
    "# Let's limit our tests to only the comparisons between things we're interested in\n",
    "boxplot = Boxplot(df=gene_df, x='Conditions', y='Values', title='Hox & MT genes', xlabel='', ylabel='Log FC', \n",
    "                  hue='Gene Group',\n",
    "                  box_pairs=[('cond_1Hox', 'cond_2Hox'), \n",
    "                             ('cond_1MT', 'cond_2MT'), \n",
    "                            ]) \n",
    "boxplot.plot()\n",
    "plt.show()\n",
    "\n",
    "# Alternatively instead of explicity setting the hue through seaborn we can do it manually (but the legend won't come up)\n",
    "# I personally prefer this and just manually set the label, it's a to do to add it in.\n",
    "# Let's limit our tests to only the comparisons between things we're interested in\n",
    "boxplot = Boxplot(df=gene_df, x='Conditions', y='Values', title='Hox & MT genes', xlabel='', ylabel='Log FC', \n",
    "                  box_colors=['lightblue', 'darkblue', 'lightgrey', 'darkgrey'],\n",
    "                  box_pairs=[('cond_1Hox', 'cond_2Hox'), \n",
    "                             ('cond_1MT', 'cond_2MT'), \n",
    "                            ]) \n",
    "boxplot.plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f251194b",
   "metadata": {},
   "source": [
    "## Saving\n",
    "\n",
    "Saving is the same for all plots and v simple, just make sure you specify what ending you want it to have."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ee04712b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Samples  Values Conditions\n",
      "0    cond_1     0.0     cond_1\n",
      "1    cond_2    -2.0     cond_2\n",
      "2    cond_1    -1.8     cond_1\n",
      "3    cond_2    -3.8     cond_2\n",
      "4    cond_1    -6.9     cond_1\n",
      "..      ...     ...        ...\n",
      "125  cond_2    -2.4     cond_2\n",
      "126  cond_1     7.0     cond_1\n",
      "127  cond_2     5.0     cond_2\n",
      "128  cond_1    -7.7     cond_1\n",
      "129  cond_2    -9.7     cond_2\n",
      "\n",
      "[130 rows x 3 columns]\n",
      "p-value annotation legend:\n",
      "ns: 5.00e-02 < p <= 1.00e+00\n",
      "*: 1.00e-02 < p <= 5.00e-02\n",
      "**: 1.00e-03 < p <= 1.00e-02\n",
      "***: 1.00e-04 < p <= 1.00e-03\n",
      "****: p <= 1.00e-04\n",
      "\n",
      "cond_1 v.s. cond_2: Mann-Whitney-Wilcoxon test two-sided with Bonferroni correction, P_val=2.169e-02 U_stat=2.606e+03\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 216x216 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Now we'll do an example where we look at the logFC between two conditions\n",
    "# of a group of genes and test whether they are significantly different.\n",
    "df = pd.read_csv('volcano.csv')\n",
    "df\n",
    "# Pretend we have two conditions\n",
    "df['cond_1'] = df['logfc'] + 1\n",
    "df['cond_2'] = df['logfc'] - 1\n",
    "\n",
    "boxplot = Boxplot(df, x='external_gene_name', y='logfc')\n",
    "hox_genes = [g for g in df['external_gene_name'].values if 'HOX' in g]\n",
    "# conditions: list, filter_column=None, filter_values=None\n",
    "formatted_df = boxplot.format_data_for_boxplot(\n",
    "                   df, \n",
    "                   conditions=[\"cond_1\", \"cond_2\"], \n",
    "                   filter_column=\"external_gene_name\",\n",
    "                   filter_values=hox_genes\n",
    "                )\n",
    "print(formatted_df)\n",
    "\n",
    "# Reinitialise boxplot with the new data\n",
    "boxplot = Boxplot(formatted_df, \"Conditions\", \"Values\", \n",
    "                  ylabel='logFC',\n",
    "                  title='Gene expression changes',\n",
    "                  box_colors=[\"orchid\", \"gold\"], \n",
    "                  add_dots=True,\n",
    "                  config={'palette': ['orchid', 'paleturquoise', 'gold'], \n",
    "                           'figsize':(3, 3),  # Size of figure (x, y)\n",
    "                           's': 20,\n",
    "                           'title_font_size': 16, # Size of the title (pt)\n",
    "                           'label_font_size': 12, # Size of the labels (pt)\n",
    "                           'title_font_weight': 700, # 700 = bold, 600 = normal, 400 = thin\n",
    "                           'font_family': 'sans-serif', # 'serif', 'sans-serif', or 'monospace'\n",
    "                           'font': ['Tahoma'] # Default: Arial  # http://jonathansoma.com/lede/data-studio/matplotlib/list-all-fonts-available-in-matplotlib-plus-samples/\n",
    "                           })\n",
    "boxplot.plot()\n",
    "plt.savefig('boxplot.svg', bbox_inches='tight') # .png, .pdf, .jpg\n",
    "plt.savefig('boxplot.png', dpi=300) # .png, .pdf, .jpg\n",
    "plt.savefig('chart.pdf') # .png, .pdf, .jpg"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
